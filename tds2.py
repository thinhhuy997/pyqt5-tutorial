# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tds2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QPushButton, QMenu, QAction
from PyQt5.QtCore import QFile, QTextStream, QThreadPool
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
import threading
import requests
from facebook import SeleniumWorker
import time
from traodoisub import Traodoisub


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        # Size of the main window
        MainWindow.resize(1486, 605)


        self.centralwidget = QtWidgets.QWidget(MainWindow)



        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(30, 10, 741, 80))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.frame.setFont(font)
        self.frame.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        
        self.addAccountButton = QtWidgets.QPushButton(self.frame)
        self.addAccountButton.setGeometry(QtCore.QRect(20, 20, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addAccountButton.setFont(font)
        self.addAccountButton.setObjectName("addAccountButton")

        self.addProxyButton = QtWidgets.QPushButton(self.frame)
        self.addProxyButton.setGeometry(QtCore.QRect(130, 20, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addProxyButton.setFont(font)
        self.addProxyButton.setObjectName("addProxyButton")

        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addProxyButton.setFont(font)
        self.addProxyButton.setObjectName("addProxyButton")

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        # 3rd and 4th parameters use to set width and height of the Table Widget
        self.tableWidget.setGeometry(QtCore.QRect(30, 130, 1439, 411))


        self.tableWidget.setObjectName("tableWidget")

        self.tableWidget.setColumnCount(11)

        # self.tableWidget.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()

        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)

        # Set specified width for column "status"
        self.tableWidget.setColumnWidth(9, 414)

        self.tableWidget.verticalHeader().setDefaultSectionSize(50)


        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 4, item)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 90, 741, 16))
        self.label.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1064, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # NEW - Right click menu
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.showContextMenu)


        # new
        self.addAccountButton.clicked.connect(self.add_accounts_from_file)
        self.addProxyButton.clicked.connect(self.add_proxies_from_file)
        
        
        self.column_order = ["tds_username", "tds_pass", "face_uid", "face_pass", "cookie", "token", "proxy", "user_agent", "tds_coins",  "status",  "action"]

        self.accounts = []
        self.base_url = "https://traodoisub.com"


        # New
        self.threadpool = QThreadPool()
        print("Multithreading with maximum %d threads" % self.threadpool.maxThreadCount())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.addAccountButton.setText(_translate("MainWindow", "Add accounts"))
        self.addProxyButton.setText(_translate("MainWindow", "Add proxies"))

        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "tds_username"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "tds_pass"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "face_uid"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "face_pass"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "cookie"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "token"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "proxy"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "user_agent"))

        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "tds_coins"))

        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "status"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "action"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)

        self.label.setText(_translate("MainWindow", "File:"))

    def showContextMenu(self, pos):
        selected_rows = set(index.row() for index in self.tableWidget.selectionModel().selectedRows())

        if len(selected_rows) > 0:
            # Convert the widget coordinates to global coordinates
            global_pos = self.tableWidget.mapToGlobal(pos)

            # Create a context menu
            context_menu = QMenu(self.tableWidget)

            # Add title action (disabled and with a different font)
            title_action = context_menu.addAction("Actions:")
            title_action.setEnabled(False)
            title_font = title_action.font()
            title_font.setBold(True)
            title_action.setFont(title_font)
            title_action.setEnabled(False)

            # Add actions to the context menu
            action_save_profile = QAction("Save profile", self.tableWidget)

            # Connect actions to slots (you can implement your own slots)
            action_save_profile.triggered.connect(lambda: self.login_and_save_profile(selected_rows))

            # Add actions to the context menu
            context_menu.addAction(action_save_profile)

            # Show the context menu at the global position
            context_menu.exec_(global_pos)

    def login_and_save_profile(self, selected_rows):
        print(f"Login and save profile for rows {', '.join(map(str, selected_rows))}")

    def on_run_button_clicked(self, row, col):
        if len(self.accounts[row]['proxy']) == 0:
            self.changeCellValue(row=row, col=self.column_order.index('status'), newValue='Lỗi xảy ra: Hãy thêm proxies trước!')
        else:
            # _______________USE SELENIUM-FACEBOOK-WORKER_________________
            facebook_login_credential = {
                "uid": self.accounts[row]["face_uid"],
                "password": self.accounts[row]["face_pass"],
                "fa_secret": self.accounts[row]["face_secret"],
            }

            tds_login_credential = {
                'username': self.accounts[row]['tds_username'],
                'password': self.accounts[row]['tds_pass']
            }

            proxy = self.split_proxies(self.accounts[row]['proxy'])

            facebook_worker = SeleniumWorker(facebook_login_credential=facebook_login_credential,
                                            tds_login_credential=tds_login_credential,
                                            proxy=proxy
                                            )
            facebook_worker.signals.result.connect(lambda result: self.display_result(result, row))
            facebook_worker.signals.error.connect(lambda error: self.display_error(error, row))
            facebook_worker.signals.coins.connect(lambda coins: self.display_coins(coins, row))
            # Execute the worker in the thread pool
            self.threadpool.start(facebook_worker)
    
    def display_result(self, result, row):
        print('result:', result)
        self.changeCellValue(row, self.column_order.index('status'), newValue=str(result))

    def display_error(self, error, row):
        print('error:', error)
        self.changeCellValue(row, self.column_order.index('status'), newValue=f'{error}')

    def display_coins(self, coins, row):
        print('coins:', coins)
        self.changeCellValue(row, self.column_order.index('tds_coins'), newValue=str(coins))

    def changeCellValue(self, row, col, newValue):
        # Create a new item with the desired value
        new_item = QtWidgets.QTableWidgetItem(newValue)

        # Set the new item for the specified cell
        self.tableWidget.setItem(row, col, new_item)


    def add_row(self, row_index, data):
        _translate = QtCore.QCoreApplication.translate
        for column_index, key in enumerate(self.column_order):
            value = data.get(key, "")

            if key == "action":
                button = QPushButton(f"Run")
                button.clicked.connect(lambda state, row=row_index, col=column_index: self.on_run_button_clicked(row, col))
                self.tableWidget.setCellWidget(row_index, column_index, button)
            else:
                item = QtWidgets.QTableWidgetItem()
                item.setText(_translate("MainWindow", str(value)))
                self.tableWidget.setItem(row_index, column_index, item)

    def add_accounts_to_table(self, accounts):
        try:
            self.tableWidget.setRowCount(len(accounts))
            __sortingEnabled = self.tableWidget.isSortingEnabled()

            # Positions of field columns in the data table
            # column_order = ["tds_username", "tds_pass", "face_uid", "face_pass", "cookie", "token", "proxy", "user_agent", "tds_coins",  "status",  "action"]

            for row_index, account_data in enumerate(accounts):
                self.add_row(row_index, account_data)
            self.tableWidget.setSortingEnabled(__sortingEnabled)

            print('Added accounts successfully!')
        except Exception as error:
            print(error)

    def add_accounts_from_file(self):
        # Open file Dialog
        file_name, _ = QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*);;Text Files (*.txt)")
        
        # Read file and import to data table
        if file_name:
            self.label.setText(str(file_name))

            file = QFile(file_name)

            if file.open(QFile.ReadOnly | QFile.Text):
                stream = QTextStream(file)
                facebook_accounts_content = stream.readAll()
                # remove first and last space
                facebook_accounts_content = facebook_accounts_content.strip()

                account_lines = facebook_accounts_content.split('\n')

                accounts = self.file_preprocessing(account_lines)

                # Add data to the data table
                self.add_accounts_to_table(accounts)
                
                file.close()
            else:
                print(f"Error opening file: {file.errorString()}")

    def file_preprocessing(self, account_lines: list):
        self.accounts = []
        for index, account_line in enumerate(account_lines):



            account_values = account_line.split('|')
            account_obj = {
                "tds_username": account_values[0], 
                "tds_pass": account_values[1],
                "tds_cookie": "",
                "tds_token": "", # This is a traodoisub account access token
                "tds_coins": "",
                "face_uid": account_values[2], 
                "face_pass": account_values[3],
                "face_secret": account_values[4],
                "cookie": account_values[5],
                "token": "",
                "proxy": "",
                "user_agent": "",
                "status": "",
                "action": "",
                }
            self.accounts.append(account_obj)
        return self.accounts
    

    def split_proxies(self, proxy_string:str)->dict:
        host, port, username, password = proxy_string.split(':')

        return {'host': host, 'port': port, 'username': username, 'password': password}
    
    def add_proxies_from_file(self):
        try:
            if self.tableWidget.rowCount() == 0:
                print("You must add accounts first")
            else:
                # Open file Dialog
                file_name, _ = QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*);;Text Files (*.txt)")
                    
                # Read file and import to data table
                if file_name:
                    self.label.setText(str(file_name))

                    file = QFile(file_name)

                    if file.open(QFile.ReadOnly | QFile.Text):
                        stream = QTextStream(file)
                        proxies_content = stream.readAll()
                        # remove first and last space
                        proxies_content = proxies_content.strip()

                        proxies_lines = proxies_content.split('\n')

                        # Add proxies to accounts
                        
                        count = 0
                        for account in self.accounts:
                            if count > len(proxies_lines) - 1:
                                # reset count to 0
                                count = 0

                            account["proxy"] = proxies_lines[count]
                            
                            # increase count
                            count += 1

                            
                        self.add_accounts_to_table(self.accounts)             

                        file.close()

                        print("Added proxies to accounts successfully!")
                    else:
                        print(f"Error opening file: {file.errorString()}")
        except Exception as error:
            print(error)
        

    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
